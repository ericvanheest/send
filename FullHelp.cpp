#include "StdAfx.h"

#include "Globals.h"
#include <stdio.h>

void FullHelp()
{
_tprintf(_T("Send - Sends keystrokes and windows messages to applications\n"));
_tprintf(_T("\n"));
_tprintf(_T("======================================================================\n"));
_tprintf(_T("\n"));
_tprintf(_T("Usage:  send [options] \"application\" \"keys\" [time]\n"));
_tprintf(_T("\n"));
_tprintf(_T("\"application\" is a case-insensitive string that matches part of a window\n"));
_tprintf(_T("caption.  For example, if you are running notepad, its title bar will be\n"));
_tprintf(_T("something similar to \"MyFile.txt - Notepad\".  You could have send.exe type\n"));
_tprintf(_T("the text \"Hello\" by using the following command:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send notepad Hello\n"));
_tprintf(_T("\n"));
_tprintf(_T("Spaces in the key string need to be quoted, as in:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send notepad \"Hello everyone!\"\n"));
_tprintf(_T("    \n"));
_tprintf(_T("[time] is a string representation of a time at which you want the keys to\n"));
_tprintf(_T("be sent to the application.  The application window need not exist until\n"));
_tprintf(_T("that time.  For example, to send the F6 key to VirtualDub at 4:55 PM, use\n"));
_tprintf(_T("the following syntax:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send virtualdub \\{F6} 4:55pm\n"));
_tprintf(_T("\n"));
_tprintf(_T("The time string accepts several different time formats (it uses the Windows\n"));
_tprintf(_T("function VarDateFromStr), including dates.  Dates with spaces must be\n"));
_tprintf(_T("quoted, as in:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send virtualdub \\{F6} \"April 1, 2001 10:55am\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("Options:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -a  Sends the commands to every window matching the expression, not\n"));
_tprintf(_T("        just the first one.\n"));
_tprintf(_T("        \n"));
_tprintf(_T("    -b  Does not bring the specified window to the foreground.  Keystrokes\n"));
_tprintf(_T("        will still be sent to whatever window is in the foreground, but\n"));
_tprintf(_T("        you may send windows messages and position/size commands to a\n"));
_tprintf(_T("        background window (useful for moving a window without bringing it\n"));
_tprintf(_T("        to the foreground first).  Using this option implies -d.\n"));
_tprintf(_T("    \n"));
_tprintf(_T("    -c  Uses a case-sensitive search, so that \"notepad\" will not match\n"));
_tprintf(_T("        \"Notepad\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -d  Disables switching back to the process that launched send.exe\n"));
_tprintf(_T("        after sending the input string.  (Windows may not always\n"));
_tprintf(_T("        permit the sending console to re-acquire focus either way.)\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -D  Introduces a delay before and after every virtual mouse or keyboard\n"));
_tprintf(_T("        event.  This can help with applications that are polling they key\n"));
_tprintf(_T("        state (e.g. DirectInput) and may otherwise miss the otherwise\n"));
_tprintf(_T("        nearly-instantaneous sequential SendInput calls.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -e  Searches every window on the system for the caption specified, even\n"));
_tprintf(_T("        child windows.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -f  Sends the specified string to the window repeatedly.  This is most\n"));
_tprintf(_T("        useful when the keystrokes you are sending will cause the window to\n"));
_tprintf(_T("        close, and you want to send the same keystrokes to the window again\n"));
_tprintf(_T("        when it reappears (with the -w options).\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -F  Sends the keystring only if the specified app is currently in the\n"));
_tprintf(_T("        foreground.  This can prevent the sending of keys and commands to\n"));
_tprintf(_T("        other unintended windows when the desired app is minimized/etc.\n"));
_tprintf(_T("        Implies -b.\n"));
_tprintf(_T("        \n"));
_tprintf(_T("    -g  Sends the specified string to whichever window happens to be in\n"));
_tprintf(_T("        the foreground.  Useful for arbitrary mouse movements that do not\n"));
_tprintf(_T("        need a particular window to be focused.  If you specify the \"-g\"\n"));
_tprintf(_T("        and a window caption, it is ignored.\n"));
_tprintf(_T("    \n"));
_tprintf(_T("    -h  Includes hidden windows in the search.  Normally, a nonvisible\n"));
_tprintf(_T("        window is not a desired target for input operations.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -i  The window message is sent to the child window specified by\n"));
_tprintf(_T("        the given dialog ID.\n"));
_tprintf(_T("        \n"));
_tprintf(_T("    -I  Outputs the dialog item ID found by the sequence provided.  This can\n"));
_tprintf(_T("        be useful in conjunction with a program such as Spy++ to determine\n"));
_tprintf(_T("        whether the correct target is being located.\n"));
_tprintf(_T("        \n"));
_tprintf(_T("    -j  Interpret \"app\" as a window handle instead of a caption.  Use\n"));
_tprintf(_T("        0x as a prefix if it is hexadecimal.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -J  Read a window handle from STDIN that can be used as \\1 in the command\n"));
_tprintf(_T("        line.  Useful for passing the result of -o to a new instance.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -k  Sends commands only if the set of keys in the \"waitkeys\" string\n"));
_tprintf(_T("        are all pressed.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -K  Sends commands only if the set of keys in the \"waitkeys\" string\n"));
_tprintf(_T("        are all released.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -l  Lists all of the window captions that \"send\" finds before\n"));
_tprintf(_T("        matching the search string.  Useful for discoving the precise\n"));
_tprintf(_T("        titles of windows.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -m  Waits for the specified number of milliseconds between moving the\n"));
_tprintf(_T("        mouse cursor and clicking the button, if appropriate (see the\n"));
_tprintf(_T("        \"Mouse Commands\" section).\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -M  Sends keyboard and mouse input via windows messages (i.e.\n"));
_tprintf(_T("        WM_KEYDOWN, WM_MOUSEMOVE, etc.) instead of using SendInput calls.\n"));
_tprintf(_T("        Note that windows messages must typically be directed to the exact\n"));
_tprintf(_T("        child window desired (e.g. a textbox) rather than the main window.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -n  Gives the found window a new caption.  This can be useful when you\n"));
_tprintf(_T("        want to send an input string that will take some time to process,\n"));
_tprintf(_T("        and then use another \"send\" command to wait for the new window\n"));
_tprintf(_T("        caption to exist.\n"));
_tprintf(_T("        \n"));
_tprintf(_T("    -o  Find the first window specified by \"app\" and print its window handle\n"));
_tprintf(_T("        without doing any further processing.  This is useful in a situation\n"));
_tprintf(_T("        where finding a child window takes some time and you want to send\n"));
_tprintf(_T("        it several commands later without re-finding it.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -O  Similar to -o but prints a report of all windows that match the\n"));
_tprintf(_T("        window specified by \\\"app\\\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -p  Sends the actual message to the parent of the indicated window\n"));
_tprintf(_T("        (using -i) instead of the window itself.  When using messages that\n"));
_tprintf(_T("        include notifications such as BN_CLICKED, this is typically useful.\n"));
_tprintf(_T("        \n"));
_tprintf(_T("    -P  Uses a given number of milliseconds as the time between window\n"));
_tprintf(_T("        polling (notably when using the -K/-k or -f options.  Polling more\n"));
_tprintf(_T("        frequently uses more resources but will quicken the response time\n"));
_tprintf(_T("        when something send is using changes (for example, the caption of\n"));
_tprintf(_T("        the window).  The default is 10 ms.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -q  Suppresses stdout messages.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -r  Uses a regular expression for the search string.  For example,\n"));
_tprintf(_T("        \"^notepad$\" would match only a window titled exactly \"Notepad\" and\n"));
_tprintf(_T("        not one name \"Untitled - Notepad\".  A regular expression of \".\"\n"));
_tprintf(_T("        will match all windows that have a title of at least one character.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -R  Repeats the entire sequence of keys the number of times specified\n"));
_tprintf(_T("        after the -R option.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -s  The window must also match the class name provided (with regular\n"));
_tprintf(_T("        expression matching if -r is specified).\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -S  This option will attempt to use a common scan code for virtual keys\n"));
_tprintf(_T("        which have a common physical location on a US 102-key keyboard.  This\n"));
_tprintf(_T("        is necessary for some low-level applications (such as games).\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -t  Times out after the given number of ms when used in conjunction with\n"));
_tprintf(_T("        the -w/-W/-x/-X/-f options\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -u  Sends commands only if the set of keys in the \"waitkeys\" string\n"));
_tprintf(_T("        are all pressed and then released.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -v  Prints some extra information about window messages.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -w  Waits for the window to exist before sending the keystrokes.\n"));
_tprintf(_T("    \n"));
_tprintf(_T("    -W  Similar to -w, but waits for the window to be enabled.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -x  Waits for the window to no longer exist before sending the keystrokes.\n"));
_tprintf(_T("\n"));
_tprintf(_T("    -X  Similar to -x, but waits for the window to be disabled.\n"));
_tprintf(_T("\n"));
_tprintf(_T("======================================================================\n"));
_tprintf(_T("\n"));
_tprintf(_T("If you want to send a special key, such as F6 or Escape, use the following\n"));
_tprintf(_T("tables (examples are for notepad or other such edit controls):\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Keyboard Modifiers:\n"));
_tprintf(_T("    \\a      Press the ALT key\n"));
_tprintf(_T("    \\A      Release the ALT key\n"));
_tprintf(_T("    \\s      Press the SHIFT key\n"));
_tprintf(_T("    \\S      Release the SHIFT key\n"));
_tprintf(_T("    \\c      Press the CONTROL key\n"));
_tprintf(_T("    \\C      Release the CONTROL key\n"));
_tprintf(_T("    \\p      Press the APPLICATIONS key\n"));
_tprintf(_T("    \\P      Release the APPLICATIONS key\n"));
_tprintf(_T("    \\w      Press the WINDOWS key\n"));
_tprintf(_T("    \\W      Release the WINDOWS key\n"));
_tprintf(_T("\n"));
_tprintf(_T("For example, \"\\shello\\S\" would send \"shift, h, e, l, l, o, unshift\" and\n"));
_tprintf(_T("create the word \"HELLO\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Arrow Keys:\n"));
_tprintf(_T("    \\u      UP arrow       \n"));
_tprintf(_T("    \\d      DOWN arrow       \n"));
_tprintf(_T("    \\l      LEFT arrow       \n"));
_tprintf(_T("    \\r      RIGHT arrow       \n"));
_tprintf(_T("\n"));
_tprintf(_T("For example, \"hllo\\l\\l\\le\" would write \"hello\" by writing \"hllo,\"\n"));
_tprintf(_T("moving left three characters, and inserting the \"e\" last.\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Special Keys:\n"));
_tprintf(_T("    \\b      Backspace\n"));
_tprintf(_T("    \\e      Escape\n"));
_tprintf(_T("    \\t      Tab\n"));
_tprintf(_T("    \\n      Enter/Return\n"));
_tprintf(_T("\n"));
_tprintf(_T("For example, \"Username\\tPassword\\n\" would type a username, push tab,\n"));
_tprintf(_T("type a password, and hit enter.\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Named Keys:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{F1}       F1 key\n"));
_tprintf(_T("    \\{F2}       F2 key\n"));
_tprintf(_T("    ...\n"));
_tprintf(_T("    \\{F24}      F24 key\n"));
_tprintf(_T("    \\{Delete}   Delete\n"));
_tprintf(_T("    \\{End}      End\n"));
_tprintf(_T("    \\{Home}     Home\n"));
_tprintf(_T("    \\{Insert}   Insert\n"));
_tprintf(_T("    \\{PgUp}     PageUp\n"));
_tprintf(_T("    \\{PgDn}     PageDown\n"));
_tprintf(_T("    \\{PrSc}     PrintScreen\n"));
_tprintf(_T("    \\{Pause}    Pause\n"));
_tprintf(_T("    \\{ScLk}     ScrollLock\n"));
_tprintf(_T("\n"));
_tprintf(_T("Keys may be abbreviated when unambiguous; delete = \"\\{d}\" etc.\n"));
_tprintf(_T("For example, \"\\{pd}\\{pd}\\{e}\" would send PageDown twice, then the \"End\" key.\n"));
_tprintf(_T("\n"));
_tprintf(_T("The value \\{Clipboard} will be replaced with the current (text) contents\n"));
_tprintf(_T("of the Windows clipboard.\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Numeric Keypad:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{n0}       Keypad Zero\n"));
_tprintf(_T("    \\{n1}       Keypad One\n"));
_tprintf(_T("    ...\n"));
_tprintf(_T("    \\{n9}       Keypad Nine\n"));
_tprintf(_T("    \\{n*}       Keypad *\n"));
_tprintf(_T("    \\{n+}       Keypad +\n"));
_tprintf(_T("    \\{n-}       Keypad -\n"));
_tprintf(_T("    \\{n/}       Keypad /\n"));
_tprintf(_T("    \\{n.}       Keypad .\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Mouse Commands:\n"));
_tprintf(_T("\n"));
_tprintf(_T("Mouse commands may be given as the special key \"m\" followed by button index,\n"));
_tprintf(_T("event, coordinates, and modifiers.  For example, to click the left\n"));
_tprintf(_T("mouse button at client-local coordinates (200,100), use this syntax:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{m,l,click,200,100,local}\n"));
_tprintf(_T("\n"));
_tprintf(_T("This could also be abbreviated to \"\\{m,l,c,200,100,l}\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("\"click\" can be replaced with \"down\" or \"up\" if desired.  If the specified\n"));
_tprintf(_T("button index is \"wheel\" (or simply \"w\"), then up/down means to roll the wheel\n"));
_tprintf(_T("up or down, and \"click\" has no meaning (the wheel as a button is usually\n"));
_tprintf(_T("the middle button).  To move the mouse without pressing a button,\n"));
_tprintf(_T("specify \"none\" (or \"n\") as the action.  The buttons may be any of the\n"));
_tprintf(_T("predefined buttons \"l,\" \"m,\" \"r,\" \"1,\" \"2\" (left, middle, right, extra 1,\n"));
_tprintf(_T("extra 2).\n"));
_tprintf(_T("\n"));
_tprintf(_T("if the \"click\" or \"c\" is capitalized (\"Click\" or \"C\") then the mouse cursor\n"));
_tprintf(_T("will be repositioned at the point where it was before executing the click.\n"));
_tprintf(_T("\n"));
_tprintf(_T("The last option can be \"local\" or \"screen\" (\"l\" or \"s\"), and makes the given\n"));
_tprintf(_T("coordinates either local to the client window, or global (to the desktop).\n"));
_tprintf(_T("\n"));
_tprintf(_T("Some more examples:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Press and hold the right mouse button at screen coordinates (100,50):\n"));
_tprintf(_T("\n"));
_tprintf(_T("       \\{m,r,d,100,50,s}\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Scroll the mouse wheel up at local coordinates (0,0):\n"));
_tprintf(_T("\n"));
_tprintf(_T("       \\{m,w,u,0,0,l}\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Move the mouse to screen coordinates (400,300):\n"));
_tprintf(_T("\n"));
_tprintf(_T("       \\{m,n,n,400,300,s}\n"));
_tprintf(_T("       \n"));
_tprintf(_T("Relative movement:\n"));
_tprintf(_T("       \n"));
_tprintf(_T("    Move the mouse 100 pixels to the right of its current position:\n"));
_tprintf(_T("    \n"));
_tprintf(_T("       \\{m,n,n,100r,0r,s}\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Move the mouse 100 pixels up and click the left button:\n"));
_tprintf(_T("    \n"));
_tprintf(_T("       \\{m,l,c,0r,-100r,s}\n"));
_tprintf(_T("\n"));
_tprintf(_T("By default, the mouse cursor is moved to the selected location and clicked\n"));
_tprintf(_T("as a single action.  This can cause programs that rely on polling rather\n"));
_tprintf(_T("than windows messages to fail to notice the click.  Use the -m option to\n"));
_tprintf(_T("specify a number of milliseconds to wait between the move and click events\n"));
_tprintf(_T("for all mouse commands in this instance of send.\n"));
_tprintf(_T("\n"));
_tprintf(_T("If you want a delay between the pressing of the mouse button and the\n"));
_tprintf(_T("releasing of it, add that delay at the end.  For example, to pause 50 ms\n"));
_tprintf(_T("before releasing the mouse button:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{m,l,c,640,480,s,50}\n"));
_tprintf(_T("\n"));
_tprintf(_T("You may use some simple math when positioning the cursor, if you like.\n"));
_tprintf(_T("For example, to move the mouse to the middle of the screen:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{m,n,n,w*.5,h*.5,s}\n"));
_tprintf(_T("\n"));
_tprintf(_T("To place the mouse at the position it was before executing any commands,\n"));
_tprintf(_T("use 'o1' (horizontal) or 'o2' (vertical) as the value, for example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{m,n,n,o1,o2,s}\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Repetition:\n"));
_tprintf(_T("\n"));
_tprintf(_T("If you want to repeat a particular command a number of times, use\n"));
_tprintf(_T("an R as the first item in the sequence.  For example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Move the mouse up and left 2 pixels, 10 times:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{R10,m,n,n,-2r,-2r,s}\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Send a WM_CHAR message 50 times:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\[R50,WM_CHAR,0x71,0x00100001]\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Move the mouse right 1 pixel, 100 times, pausing 5 ms each time\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{R100:5,m,n,n,1r,0r,s}\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Window Positioning:\n"));
_tprintf(_T("\n"));
_tprintf(_T("The active window's size and position may be changed as shown in the\n"));
_tprintf(_T("following examples:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    Move the active window to absolute position (200,100) and resize\n"));
_tprintf(_T("    it to 640x480:\n"));
_tprintf(_T("    \n"));
_tprintf(_T("       \\{wp,200,100}\\{ws,640,480}\n"));
_tprintf(_T("       \n"));
_tprintf(_T("    Move the active window four pixels to the right and two pixels up\n"));
_tprintf(_T("    \n"));
_tprintf(_T("       \\{wp,4r,-2r}\n"));
_tprintf(_T("       \n"));
_tprintf(_T("    Move the active window to absolute position (1000,1100) using the\n"));
_tprintf(_T("    bottom-right corner of the window as the anchor.\n"));
_tprintf(_T("    \n"));
_tprintf(_T("       \\{wp,1000x,1100x}\n"));
_tprintf(_T("       \n"));
_tprintf(_T("    Resize the current window to 320x240\n"));
_tprintf(_T("    \n"));
_tprintf(_T("       \\{ws,320,240}\n"));
_tprintf(_T("       \n"));
_tprintf(_T("    Expand the current window by 100 pixels horizontally\n"));
_tprintf(_T("    \n"));
_tprintf(_T("       \\{ws,100r,0}\n"));
_tprintf(_T("       \n"));
_tprintf(_T("Note that a zero window size is simply ignored.  A zero position,\n"));
_tprintf(_T("however, indicates the top or left side of the screen.  You may also\n"));
_tprintf(_T("place a position and size command in the same string, if you like\n"));
_tprintf(_T("(this causes only one MoveWindow call to be made, which may or may\n"));
_tprintf(_T("not be important).\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{wp,200,100,640,480}\n"));
_tprintf(_T("    \n"));
_tprintf(_T("You may use the letters 'h' and 'w' in the numeric portion of the call\n"));
_tprintf(_T("to represent the current height and width, respectively, of the Windows\n"));
_tprintf(_T("desktop.  The following call would move the window to position (1500,800)\n"));
_tprintf(_T("if your desktop resolution is 1600x1200:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{wp,w-100,h-400}\n"));
_tprintf(_T("    \n"));
_tprintf(_T("If you use the capital versions of 'H' or 'W' then the value used will be\n"));
_tprintf(_T("the \"work area\" dimensions (those of the screen minus the task bar or\n"));
_tprintf(_T("other toolbars.\n"));
_tprintf(_T("\n"));
_tprintf(_T("If you use \"ww\" or \"hh\" then the current window width or height will be used.\n"));
_tprintf(_T("\n"));
_tprintf(_T("Send uses a very simple mathematical parser that understands only these\n"));
_tprintf(_T("operators:  + (add), - (subtract), * (multiply), / (divide), %% (mod)\n"));
_tprintf(_T("Proper order-of-operations is not followed; 1+2*3 is 9, not 7.  Use\n"));
_tprintf(_T("parenthesis to force ordering if desired, e.g. 1+(2*3)\n"));
_tprintf(_T("\n"));
_tprintf(_T("If you add a digit after a \"w\" or \"h\" then that index will be used to\n"));
_tprintf(_T("determine which monitor's width or height is retrieved.  For example, to\n"));
_tprintf(_T("move a window to the lower-right corner of monitor 2:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\{wp,w2x,h2x}\n"));
_tprintf(_T("\n"));
_tprintf(_T("Note that the \"work area\" does not apply to monitors other than \"1\"\n"));
_tprintf(_T("    \n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Windows Messages:\n"));
_tprintf(_T("\n"));
_tprintf(_T("You may send arbitrary windows messages to the active window during\n"));
_tprintf(_T("playback.  the wParam and lParam may be omitted if '0' is desired for their\n"));
_tprintf(_T("values.  For example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send notepad \"\\[WM_SYSCOMMAND,SC_MINIMIZE]\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("will minimize the notepad window.  Note that this will take focus away\n"));
_tprintf(_T("from this window and further keystrokes may not be recognized. \n"));
_tprintf(_T("Further windows messages, however, will be sent.  Windows message\n"));
_tprintf(_T("sending is generally for advanced users, but a few common ones are\n"));
_tprintf(_T("listed here for convenience:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\[WM_CLOSE]                     Will close the active window\n"));
_tprintf(_T("    \\[WM_SYSCOMMAND,SC_MINIMIZE]    Minimizes the active window\n"));
_tprintf(_T("    \\[WM_SYSCOMMAND,SC_MAXIMIZE]    Maximizes the active window\n"));
_tprintf(_T("    \\[WM_SYSCOMMAND,SC_RESTORE]     \"Un-minimizes\" the active window\n"));
_tprintf(_T("\n"));
_tprintf(_T("You may specify decimal or hexadecimal numbers (with the \"0x\" prefix), such\n"));
_tprintf(_T("as in the following example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\[WM_COMMAND,1,0x4007]\n"));
_tprintf(_T("    \n"));
_tprintf(_T("String pointers may be specified using single quotes.  For example, this will\n"));
_tprintf(_T("directly set the text in the first child window of notepad (the edit control)\n"));
_tprintf(_T("without using keystrokes.  Using a windows message like this allows you to\n"));
_tprintf(_T("perform window operations without bringing the window to the foreground.\n"));
_tprintf(_T("To insert single quotes, escape them with a backslash:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send -i c notepad \"\\[WM_SETTEXT,0,'Insert this \\'text\\' here']\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("If you wish to post the message to the window's message queue instead of\n"));
_tprintf(_T("using SendMessage, include \",p\" at the end of the command.  For example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    \\[WM_COMMAND,2,0,p]\n"));
_tprintf(_T("\n"));
_tprintf(_T("This will post the WM_COMMAND message without waiting for a response.  You\n"));
_tprintf(_T("must specify the LPARAM and WPARAM values if you are specifying 'p' to\n"));
_tprintf(_T("use PostMessage.\n"));
_tprintf(_T("    \n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Pausing during sending of keystrokes:\n"));
_tprintf(_T("\n"));
_tprintf(_T("You may have the program pause for a user-specified number of milliseconds\n"));
_tprintf(_T("during playback of keystrokes by including \\{sX} in the send string, where\n"));
_tprintf(_T("X is an integer.  For example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send notepad \"A\\{s500}B\\{s1000}C\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("would send the \"A\" key, wait half a second, send the \"B\" key, wait 1\n"));
_tprintf(_T("second, and then send the \"C\" key.\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Sending commands only if certain keys are pressed or released:\n"));
_tprintf(_T("\n"));
_tprintf(_T("Using the -k (pressed) or -K (released) option will send the provided\n"));
_tprintf(_T("command string only if the list of keys given are all down or all up.\n"));
_tprintf(_T("This does not wait for the keys to be pressed or released; if the\n"));
_tprintf(_T("contition is not met the commands are simply not sent and the program\n"));
_tprintf(_T("will exit (unless -f is used).\n"));
_tprintf(_T("\n"));
_tprintf(_T("The \"waitkeys\" string can be any ASCII characters on the keyboard or\n"));
_tprintf(_T("any of the following predefined strings:\n"));
_tprintf(_T("         \\c, \\s, \\a, \\w   (control, shift, alt, windows)\n"));
_tprintf(_T("         \\t, \\n, \\e  (tab, enter, escape)\n"));
_tprintf(_T("         \\l, \\r, \\u, \\d  (arrow keys - left, right, up, down)\n"));
_tprintf(_T("         \\F#  Function key #, where # is a hex digit, 1-c\n"));
_tprintf(_T("         \\P#  Numeric keypad key (0-9 . / * - +)\n"));
_tprintf(_T("         \\v## Predefined virtual key, where ## is a hex value, 00-ff\n"));
_tprintf(_T("         \n"));
_tprintf(_T("For example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send -dfg -k \"\\c\\Fc\" \"null\" \"\\{m,l,c,0r,0r}\"\n"));
_tprintf(_T("    \n"));
_tprintf(_T("This will repeatedly click the mouse at its current location while\n"));
_tprintf(_T("Control+F12 is pressed.\n"));
_tprintf(_T("\n"));
_tprintf(_T("----------------------------------------------------------------------\n"));
_tprintf(_T("\n"));
_tprintf(_T("Sending messages to dialog IDs:\n"));
_tprintf(_T("\n"));
_tprintf(_T("If you want to send a windows message (or window positioning command)\n"));
_tprintf(_T("to a child window, you can specify a dialog ID or chain of IDs in the\n"));
_tprintf(_T("following manner:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send -i id,id,id,... <windowname>\n"));
_tprintf(_T("\n"));
_tprintf(_T("Where \"id\" can either be a numeric dialog ID (decimal by default, or prefix\n"));
_tprintf(_T("with 0x to use hex), a string surrounded by single-quotes (which will match\n"));
_tprintf(_T("the window text of a control such as a button or checkbox), or one of these\n"));
_tprintf(_T("characters:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    p   previous window\n"));
_tprintf(_T("    n   next window\n"));
_tprintf(_T("    f   first window\n"));
_tprintf(_T("    l   last window\n"));
_tprintf(_T("    c   first child window\n"));
_tprintf(_T("    o   owner window\n"));
_tprintf(_T("\n"));
_tprintf(_T("For example, to move the \"Save As...\" button in the Display Properties\n"));
_tprintf(_T("window to the upper left corner of its parent client area, you could use\n"));
_tprintf(_T("this command:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send -i c,c,n,n,n \"Display Properties\" \\{wp,0,0}\n"));
_tprintf(_T("\n"));
_tprintf(_T("You can specify a dialog item's control ID or window handle with the special\n"));
_tprintf(_T("text 'id' and 'hwnd'.  Also, the delimiter \":\" can be used to represent a\n"));
_tprintf(_T("hiword/loword split.\n"));
_tprintf(_T("\n"));
_tprintf(_T("When sending notifications such as BN_CLICKED, you will most likely want to\n"));
_tprintf(_T("use the -p option to send the actual notification to the parent of the\n"));
_tprintf(_T("control, rather than the control itself.  For example:\n"));
_tprintf(_T("\n"));
_tprintf(_T("    send -pi c,n,n,n,n,n,n \"Run\" \"\\[WM_COMMAND,BN_CLICKED:id,hwnd]\"\n"));
_tprintf(_T("\n"));
_tprintf(_T("With a bit of effort, you can reposition virtually any controls on any\n"));
_tprintf(_T("window, modify text, etc.\n"));
_tprintf(_T("\n"));
}
